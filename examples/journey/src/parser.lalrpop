use scanner::*;
use nodes::*;

grammar;

pub Expressions: Vec<Expression> = {
    <e: Expression> <rest: Expressions> => { concat(e, &rest) },
    <Expression> => { vec![<>] },
    <Or> => { vec![Expression::Or(<>)] }
}

pub Expression: Expression = {
    <Terminal> => { Expression::Token(<>) },
    <Group> => { Expression::Group(<>) },
    <STAR> => { Expression::Token(<>) }
}

pub Group: Vec<Expression> = {
  LPAREN <Expressions> RPAREN
}

pub Or: Vec<Expression> = {
    <lhs: Expression> OR <rhs: Expression> => { vec![lhs, rhs] },
    <lhs: Expression> OR <rhs: Or> => { concat(lhs, &rhs) },
}

pub Terminal: Token = {
    <SYMBOL>,
    <LITERAL>,
    <SLASH>,
    <DOT>
}

extern {
    type Location = usize;
    type Error = NotPossible;

    enum Token {
        SLASH => Token::Slash,
        LPAREN => Token::LParen,
        RPAREN => Token::RParen,
        DOT => Token::Dot,
        OR => Token::Or,
        STAR => Token::Star(_),
        SYMBOL => Token::Symbol(_),
        LITERAL => Token::Literal(_),
    }
}
