use scanner::*;
use nodes::*;

grammar;

pub Expressions: Vec<Expression> = {
    <e: Expression> <rest: Expressions> => {
        let mut v = Vec::with_capacity(1 + rest.len());
        v.push(e);
        v.extend_from_slice(&rest);
        v
    },
    <Expression> => { vec![<>] },
}

pub Expression: Expression = {
    <Terminal> => { Expression::Token(<>) },
    <Group> => { Expression::Group(<>) },
    <Star> => { Expression::Token(<>) }
}

pub Group: Vec<Expression> = {
  LParen <Expressions> RParen
}

pub Terminal: Token = {
    <Symbol>,
    <Literal>,
    <Slash>,
    <Dot>
}

extern {
    type Location = usize;
    type Error = NotPossible;

    enum Token {
        Slash => Token::Slash,
        LParen => Token::LParen,
        RParen => Token::RParen,
        Dot => Token::Dot,
        Or => Token::Or,
        Star => Token::Star(_),
        Symbol => Token::Symbol(_),
        Literal => Token::Literal(_),
    }
}
